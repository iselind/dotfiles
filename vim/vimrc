scriptencoding utf-8

set backspace=indent,eol

syntax enable

set expandtab

set ignorecase
set smartcase
set incsearch

set autoindent
set smartindent

set softtabstop=4
set tabstop=4
set shiftwidth=4

" Make sure comments continue on <ENTER> and starting new lines with o
set formatoptions+=ro

set laststatus=2

set hlsearch

set scrolloff=5

if has('gui_running')
    set background=light
else
    set background=dark
endif

set modeline

" Make Vim automatically refresh any files that haven't been edited by Vim
set autoread

" Highlight space error
:highlight ExtraWhitespace term=inverse gui=inverse cterm=inverse
" Show trailing white space and when tabs and space are mixed, also highlight
" when we have more than one white space between non-white space characters
:match ExtraWhitespace /^\s\+$\|\s\+$\|S\s\{2,\}\S\|\t\+ \+/

:set cursorline

" What indentation looks like
set listchars=tab:▷⋅

filetype plugin indent on

set statusline=%t[%{strlen(&fenc)?&fenc:'none'},%{&ff}]%h%y%r%m%=L%l,C%c\ %P

" Git convenience commands, % is the current file name with folder relative to
" where vim was started
command Gadd !git add %
command Gdiff !git diff %
command Gstatus !git status
command Gcommit !git commit
command Gpush !git push

nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

set splitbelow
set splitright

" Load all plugins now.
" Plugins need to be added to runtime path before help tags can be generated.
packloadall
" Load all of the help tags now, after plug ins have been loaded.
" All messages and errors will be ignored.
silent! helptags ALL

let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 0
let g:ale_lint_delay = 1000

" Exercism stuff
function! s:exercism_tests()
  if expand('%:e') ==# 'vim'
    let testfile = printf('%s/%s.vader', expand('%:p:h'),
          \ tr(expand('%:p:h:t'), '-', '_'))
    if !filereadable(testfile)
      echoerr 'File does not exist: '. testfile
      return
    endif
    source %
    execute 'Vader' testfile
  else
    let sourcefile = printf('%s/%s.vim', expand('%:p:h'),
          \ tr(expand('%:p:h:t'), '-', '_'))
    if !filereadable(sourcefile)
      echoerr 'File does not exist: '. sourcefile
      return
    endif
    execute 'source' sourcefile
    Vader
  endif
endfunction

noremap <F5> :lprevious<CR>
noremap <F6> :lnext<CR>

augroup exercism
    autocmd!
    autocmd BufRead *.{vader,vim} command! -buffer Test call s:exercism_tests()
augroup END
